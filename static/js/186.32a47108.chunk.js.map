{"version":3,"file":"static/js/186.32a47108.chunk.js","mappings":"qLACA,EAAyB,uB,SCczB,EAZe,WACb,OACE,SAAC,KAAD,CACEA,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,UAAWC,GAGhB,C,mICwCD,UA/CgB,WACd,OAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,UAAS,MAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAG,6CAAyCF,EAAzC,4BAAoEG,EAAAA,EAApE,oBAETC,EAAAA,EAAAA,YAAU,WACRP,GAAU,GACV,IAAMQ,EAAU,mCAAG,uGACMC,EAAAA,EAAAA,GAAYJ,GADlB,YACXK,EADW,yBAGfV,GAAU,IACJW,GAJS,OAIKD,EAASC,UACrBC,KAAI,SAAAC,GAAM,MAAK,CACrBC,QAASD,EAAOC,QAChBC,OAAQF,EAAOE,OACfC,GAAIH,EAAOG,GAHK,IAKlBd,EAAWS,GAVI,8BAYT,IAAIM,MAAM,oBAZD,4CAAH,qDAehBT,GACD,GAAE,CAACH,IAEJ,IAAMa,EAAQC,EAAQ,MAEtB,OACE,gCACGpB,IAAU,SAAC,IAAD,KACX,wBACGE,GAAWA,EAAQmB,OAClBnB,EAAQW,KAAI,gBAAGI,EAAH,EAAGA,GAAID,EAAP,EAAOA,OAAQD,EAAf,EAAeA,QAAf,OACV,gBAAIO,MAAO,CAAEC,UAAW,UAAxB,WACE,qCAAaP,MACb,uBAAIG,EAAMJ,OAF6BE,EAD/B,KAOZ,wDAKT,C,8ECnDM,IAAMV,EAAU,mCAEVG,EAAc,SAAAc,GAAG,OAC5BC,MAAMD,GACHE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAT,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,oBAAqBF,EAArC,GAHc,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/Reviews/Reviews.jsx","functions/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import { Blocks } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <Blocks\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"blocks-loading\"\n      className={css.loader}\n    />\n  );\n};\n\nexport default Loader;\n","import Loader from 'components/Loader/Loader';\nimport { fetchMovies } from 'functions/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { API_KEY } from '../../functions/api';\n\nconst Reviews = () => {\n  const [loader, setLoader] = useState(false);\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n\n  useEffect(() => {\n    setLoader(true);\n    const getReviews = async () => {\n      const response = await fetchMovies(URL);\n      if (response) {\n        setLoader(false);\n        const results = [...response.results];\n        results.map(review => ({\n          content: review.content,\n          author: review.author,\n          id: review.id,\n        }));\n        setReviews(results);\n      } else {\n        throw new Error('Error in Reviews');\n      }\n    };\n    getReviews();\n  }, [URL]);\n\n  const parse = require('html-react-parser');\n\n  return (\n    <>\n      {loader && <Loader />}\n      <ul>\n        {reviews && reviews.length ? (\n          reviews.map(({ id, author, content }) => (\n            <li style={{ listStyle: 'circle' }} key={id}>\n              <h3>Author: {author}</h3>\n              <p>{parse(content)}</p>\n            </li>\n          ))\n        ) : (\n          <p>There are no reviews yet</p>\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n\n// dangerouslySetInnerHTML={{__html: }}\n","export const API_KEY = 'e6237ab11d37482483effc956909f434';\n\nexport const fetchMovies = url =>\n  fetch(url)\n    .then(resp => resp.json())\n    .catch(error => console.log('fetchmovie error:', error));\n\n// export const handleMoviesData = (response, movies) => {\n//   response.forEach(movie => {\n//     return movies.push({\n//       movieID: movie.id,\n//       movieTitle: movie.title,\n//       movieBackdrop: IMG_PATH + movie.backdrop_path,\n//     });\n//   });\n// };\n"],"names":["visible","height","width","ariaLabel","className","css","useState","loader","setLoader","reviews","setReviews","movieId","useParams","URL","API_KEY","useEffect","getReviews","fetchMovies","response","results","map","review","content","author","id","Error","parse","require","length","style","listStyle","url","fetch","then","resp","json","catch","error","console","log"],"sourceRoot":""}