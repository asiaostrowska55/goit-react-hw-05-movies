{"version":3,"file":"static/js/881.2ed1d5f4.chunk.js","mappings":"qLACA,EAAyB,uB,SCczB,EAZe,WACb,OACE,SAAC,KAAD,CACEA,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,UAAWC,GAGhB,C,8ECbM,IAAMC,EAAU,mCAEVC,EAAc,SAAAC,GAAG,OAC5BC,MAAMD,GACHE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAT,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,oBAAqBF,EAArC,GAHc,C,yHCD9B,EAAuB,qBAAvB,EAAmD,qBAAnD,EAAiF,uBAAjF,EAAoH,0B,2DC4FpH,EArFe,WACb,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAiBJ,EAAAA,EAAAA,UAAS,IAAnBK,GAAP,eAEMC,EAAY,mCAAG,WAAMC,GAAN,4EACnBH,GAAa,GACbG,EAAMC,iBACND,EAAME,cAAcC,QACC,KAAjBT,EAAMU,OAJS,uBAKjBP,GAAa,GALI,kBAMVQ,EAAAA,OAAAA,KAAY,2BANF,wBAQKtB,EAAAA,EAAAA,GAAY,qDAAD,OACoBD,EAAAA,EADpB,kBACqCY,IATrD,UAWc,KAH3BY,EARa,QAWLC,QAAQC,OAXH,wBAYjBX,GAAa,GACbC,EAAOU,OAAS,EAbC,kBAcVH,EAAAA,OAAAA,KACL,+EAfe,YAkBfC,EAlBe,iBAmBjBT,GAAa,IACPU,GApBW,OAoBGD,EAAUC,UACtBE,KAAI,SAAAC,GAAK,MAAK,CACpBC,MAAOD,EAAMC,MACbC,GAAIF,EAAME,GACVC,aAAcH,EAAMG,aAHL,IAMjBf,EAAOU,OAAS,EAEhBD,EAAQO,SAAQ,SAAAC,GACd,IACMC,EADc,IAAIC,KAAKF,EAAOF,cACJK,mBAAmB,QAAS,CAC1DC,KAAM,YAGRrB,EAAOsB,KAAK,CACVC,QAASN,EAAOH,GAChBU,WAAYP,EAAOJ,MACnBY,YAAaP,GAEhB,IAxCgB,8BA0CX,IAAIQ,MAAM,wBA1CC,4CAAH,sDAkDlB,OACE,kBAAMC,SAAU1B,EAAhB,WACE,kBAAO2B,QAAQ,gBACd,IACD,kBACEd,GAAG,cACHe,KAAK,OACLC,YAAY,mBACZC,SAZe,SAAA7B,GACnBL,EAASK,EAAM8B,OAAOpC,MACvB,KAYG,mBAAQiC,KAAK,SAAb,qBACA,eAAI/C,UAAWC,EAAf,SACGe,GACC,SAACmC,EAAA,EAAD,IAEkB,IAAlBjC,EAAOU,QACPV,EAAOW,KAAI,SAAAC,GAAK,OACd,eAAI9B,UAAWC,EAAf,UACE,UAAC,KAAD,CAAMD,UAAWC,EAAUmD,GAAE,kBAAatB,EAAMW,SAAhD,WACE,uBAAIX,EAAMY,cACV,eAAG1C,UAAWC,EAAd,UAAyB6B,EAAMa,YAA/B,WAH4Bb,EAAMW,QADxB,QAYzB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","functions/api.js","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import { Blocks } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <Blocks\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"blocks-loading\"\n      className={css.loader}\n    />\n  );\n};\n\nexport default Loader;\n","export const API_KEY = 'e6237ab11d37482483effc956909f434';\n\nexport const fetchMovies = url =>\n  fetch(url)\n    .then(resp => resp.json())\n    .catch(error => console.log('fetchmovie error:', error));\n\n// export const handleMoviesData = (response, movies) => {\n//   response.forEach(movie => {\n//     return movies.push({\n//       movieID: movie.id,\n//       movieTitle: movie.title,\n//       movieBackdrop: IMG_PATH + movie.backdrop_path,\n//     });\n//   });\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Movies_link__MzAfU\",\"date\":\"Movies_date__y3KJx\",\"listEl\":\"Movies_listEl__aP4U3\",\"movieList\":\"Movies_movieList__FD6N4\"};","import css from './Movies.module.css';\nimport { useState } from 'react';\nimport { fetchMovies } from 'functions/api';\nimport Loader from 'components/Loader/Loader';\nimport { Link } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { API_KEY } from '../../functions/api';\n\nconst Movies = () => {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies] = useState([]);\n\n  const handleSubmit = async event => {\n    setIsLoading(true);\n    event.preventDefault();\n    event.currentTarget.reset();\n    if (value.trim() === '') {\n      setIsLoading(false);\n      return Notify.info('Please provide a query');\n    }\n    const movieList = await fetchMovies(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`\n    );\n    if (movieList.results.length === 0) {\n      setIsLoading(false);\n      movies.length = 0;\n      return Notify.info(\n        'We could not find the movie you are looking for. Please try another title.'\n      );\n    }\n    if (movieList) {\n      setIsLoading(false);\n      const results = [...movieList.results];\n      results.map(movie => ({\n        title: movie.title,\n        id: movie.id,\n        release_date: movie.release_date,\n      }));\n\n      movies.length = 0;\n\n      results.forEach(result => {\n        const releaseDate = new Date(result.release_date);\n        const releaseYear = releaseDate.toLocaleDateString('en-US', {\n          year: 'numeric',\n        });\n\n        movies.push({\n          movieId: result.id,\n          movieTitle: result.title,\n          releaseDate: releaseYear,\n        });\n      });\n    } else {\n      throw new Error('Error in Movies page');\n    }\n  };\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"searchInput\" />\n      {''}\n      <input\n        id=\"searchInput\"\n        type=\"text\"\n        placeholder=\"Search for movie\"\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Search</button>\n      <ul className={css.movieList}>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          movies.length !== 0 &&\n          movies.map(movie => (\n            <li className={css.listEl} key={movie.movieId}>\n              <Link className={css.link} to={`/movies/${movie.movieId}`}>\n                <p>{movie.movieTitle}</p>\n                <p className={css.date}>{movie.releaseDate} </p>\n              </Link>\n            </li>\n          ))\n        )}\n      </ul>\n    </form>\n  );\n};\n\nexport default Movies;\n"],"names":["visible","height","width","ariaLabel","className","css","API_KEY","fetchMovies","url","fetch","then","resp","json","catch","error","console","log","useState","value","setValue","isLoading","setIsLoading","movies","handleSubmit","event","preventDefault","currentTarget","reset","trim","Notify","movieList","results","length","map","movie","title","id","release_date","forEach","result","releaseYear","Date","toLocaleDateString","year","push","movieId","movieTitle","releaseDate","Error","onSubmit","htmlFor","type","placeholder","onChange","target","Loader","to"],"sourceRoot":""}